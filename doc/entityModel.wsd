@startuml

' uncomment the line below if you're using computer with a retina display
' skinparam dpi 300
!define Entity(name,desc) class name as "desc" << (E,#FFAAAA) >>
' we use bold for primary key
' green color for unique
' and underscore for not_null
!define primary_key(x) <b>x</b>
!define not_null(x) <u>x</u>
' other tags available:
' <i></i>
' <back:COLOR></color>, where color is a color name or html color code
' (#FFAACC)
' see: http://plantuml.com/classes.html#More
hide methods
hide stereotypes
' entities

Entity(volunteer, "Volunteer"){
  not_null(first_name) STRING
  not_null(last_name) STRING
  not_null(phone) STRING
  not_null(email) STRING
  confirmation_code STRING
  confirmation_valid_to DATETIME
  confirmed_at DATETIME
}

Entity(volunteer_label, "Volunteer Label"){
  not_null(group_id) ID
  not_null(name) STRING
  description STRING

}

Entity(assigned_volunteer_label, "Assigned Volunteer label"){
  not_null(label_id) ID
  not_null(volunteer_id) ID
  not_null(added_by) ID
}

Entity(address, "Address"){
  not_null(street) STRING
  not_null(street_number) STRING
  not_null(city) STRING
  not_null(city_part) STRING
  not_null(geo_entry_id) STRING
  not_null(geo_unit_id) STRING
  not_null(geo_coord_x) FLOAT
  not_null(geo_coord_y) FLOAT
  not_null(postal_code) STRING
  not_null(country_code) "ISO 3166-1 alpha 2 code"
  not_null(addressable_id) ID
  not_null(addressable_type) STRING
}

Entity(request, "Request"){
  not_null(text) max 160 STRING
  not_null(required_volunteer_count) INTEGER
  not_null(subscriber) STRING
  not_null(subscriber_phone) STRING
  not_null(subscriber_email) STRING
  not_null(created_by_id) ID
  coordinator_id ID
  not_null(organisation_id) ID
  ' When the request shall be fullfilled, can be null
  fullfillment_date DATETIME
  ' States of the reuqest
  ' new -> new nobody is working on it
  ' searching_capacity -> the search for volunteers is ongoing
  ' pending_confirmation -> the volunteers have been found but the coordinator need to confirm the help with them via phone or other channel
  ' help_coordinated -> the volunteers help was agreed and the help was coordinated
  ' closed -> the request was closed. see closed_status to see why
  not_null(state) ENUM[new|searching_capacity|pending_confirmation|help_coordinated|closed]
  ' Why the request was closed
  ' fulfilled -> The request was fulfilled
  ' failed -> The request failed
  ' irrelevant -> The request became irrelevant
  closed_status ENUM[fulfilled|failed|irrelevant]
  closed_note STRING
  closed_at DATETIME
  closed_by_id ID
  not_null(state_last_updated_at) DATETIME
}
' TODO TOM on state, WTF is prislibeno?

Entity(requested_volunteer, "Requested Volunteer"){
  not_null(volunteer_id) ID
  not_null(request_id) ID
  not_null(state) ENUM[pending|notified|accepted|rejected|manually_added|removed]
  last_notified_at DATETIME
  last_accepted_at DATETIME
  last_rejected_at DATETIME
  last_removed_at DATETIME
}

Entity(message, "Message") {
  not_null(volunteer_id) ID
  not_null(text) STRING
  not_null(created_by) ID
  not_null(created_at) DATETIME
  not_null(state) ENUM[pending|sent|received]
  request_id ID
  read BOOL default false
}

Entity(organisation, "Organisation") {
  not_null(name) STRING
  not_null(abbrerviation) STRING
  ' TODO: The slug can be the same as the abbrev or name
  not_null(slug) STRING

  business_id_number STRING
  not_null(contact_person) STRING
  not_null(contact_person_phone) STRING
  not_null(contact_person_email) STRING
}

Entity(organisation_group, "Organisation Group") {
  not_null(name) STRING
  not_null(slug) STRING
}

Entity(volunteer_in_organisation_group, "Volunteer In Organisation Group"){
  not_null(organisation_group_id) ID
  not_null(volunteer_id) ID
  not_null(is_exclusive) bool default false
  not_null(is_verified) bool default false
  not_null(is_rejected) bool default false
  created_by_id ID
  comments STRING
}

Entity(organisation_in_organisation_group, "Organisation In Organisation Group"){
  not_null(organisation_group_id) ID
  not_null(organisation_id) ID
}

Entity(user, "User"){
 ' Devise
}

Entity(user_role, "UserRole"){
  not_null(user_id) ID
  not_null(role_id) ID
}

Entity(role, "Role") {
  not_null(name) ENUM[coordinator|superadmin]
  not_null(resource_type) STRING
  not_null(resource_id) ID
}

' relationships
organisation_group 	o-- organisation
(organisation_group, organisation) .- organisation_in_organisation_group
user o-- organisation
(user, organisation) .- user_role
user_role -> role
volunteer o-- volunteer_label
(volunteer, volunteer_label) .- assigned_volunteer_label
organisation *-- request
request -> user
request  o-- volunteer
(request, volunteer) .- requested_volunteer
volunteer *- address
request -> address
volunteer_in_organization_group -o volunteer
organization_group <- volunteer_in_organization_group
volunteer --o message
request --o message

@enduml
